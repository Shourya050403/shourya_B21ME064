# -*- coding: utf-8 -*-
"""05b-mle-cameraman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFqsclafvMdba4DW0LBp1g8xdbzSJqQu
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
import cv2

def read_image(image_path):
    # Read the image as an array
    image = cv2.imread(image_path)
    return image

def convert_to_grayscale(image):
    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return gray_image

def normalize_image(image):
    # Normalize the grayscale image values between 0 and 1
    normalized_image = image / 255
    return normalized_image

def repeat_image(image, repetitions):
    # Repeat the grayscale image T times along the third axis
    repeated_image = np.repeat(image[:, :, np.newaxis], repetitions, axis=2)
    return repeated_image

def generate_random_poisson(image):
    # Generate random values following a Poisson distribution based on the repeated image
    poisson_image = stats.poisson.rvs(image)
    return poisson_image

def create_binary_mask(image, threshold):
    # Create a binary mask based on a threshold value
    binary_mask = (image >= threshold).astype(float)
    return binary_mask

def estimate_parameter(binary_mask):
    # Estimate the parameter using the binary mask
    estimated_parameter = -np.log(1 - np.mean(binary_mask, axis=2))
    return estimated_parameter

def display_image(image):
    # Display the image
    plt.imshow(image, cmap='gray')
    plt.show()

# Set the number of repetitions for the image
repetitions = 100

# Read the image
image_path = '/content/kids.tif'
image = read_image(image_path)

# Convert the image to grayscale and normalize the values between 0 and 1
gray_image = convert_to_grayscale(image)
normalized_image = normalize_image(gray_image)

# Repeat the normalized image T times along the third axis
repeated_image = repeat_image(normalized_image, repetitions)

# Generate random values following a Poisson distribution based on the repeated image
poisson_image = generate_random_poisson(repeated_image)

# Create a binary mask based on a threshold value
threshold = 1
binary_mask = create_binary_mask(poisson_image, threshold)

# Estimate the parameter using the binary mask
estimated_parameter = estimate_parameter(binary_mask)

# Display the estimated parameter as a grayscale image
display_image(estimated_parameter)